// Generated by CoffeeScript 1.10.0
(function() {
  var DeleteHAProxy, PostHAProxy, Promise, PutHAProxy, Start, Stop, Update, Validate, assert, async, getPromise, needle, schema_haproxy, utils, validate;

  validate = require('json-schema').validate;

  assert = require('assert');

  Promise = require('bluebird');

  async = require('async');

  needle = Promise.promisifyAll(require('needle'));

  utils = require('utils')._;

  schema_haproxy = require('./schema').schema_haproxy;

  getPromise = function() {
    return new Promise(function(resolve, reject) {
      return resolve();
    });
  };

  Validate = function(config, schema_configs) {
    var checkschema;
    if (!config) {
      throw new Error("haproxy Validate - invalid input");
    }
    checkschema = validate(config, schema_configs);
    console.log('haproxy schema validate result: ', checkschema);
    if (!checkschema.valid) {
      throw new Error("HAProxy schema check failed" + checkschema.valid);
      return false;
    } else {
      return true;
    }
  };

  PostHAProxy = function(baseUrl, config) {
    return needle.postAsync(baseUrl + "/haproxy", config, {
      json: true
    }).then((function(_this) {
      return function(resp) {
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        console.log("response code from post on haproxy - " + resp[0].statusCode);
        return resp[1].id;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  DeleteHAProxy = function(baseUrl, instanceid) {
    return needle.deleteAsync(baseUrl + ("/haproxy/" + instanceid), {
      json: true
    }).then((function(_this) {
      return function(resp) {
        if (resp[0].statusCode !== 204) {
          throw new Error('invalidStatusCode');
        }
        return true;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  PutHAProxy = function(baseUrl, instanceid, config) {
    return needle.putAsync(baseUrl + ("/haproxy/" + instanceid), config, {
      json: true
    }).then((function(_this) {
      return function(resp) {
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        return true;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Start = function(context) {
    var config, configObj, ref, ref1;
    if (!(context.bInstalledPackages && context.service.name && (context.service.factoryConfig != null))) {
      throw new Error('haproxy-storm.Start missingParams');
    }
    if ((context.instance != null) && ((ref = context.instance) != null ? ref.length : void 0) > 0) {
      return context;
    }
    configObj = (ref1 = context.service.factoryConfig) != null ? ref1.config : void 0;
    config = configObj[context.service.name];
    if (config == null) {
      throw new Error('haproxy-storm.Start missingParams');
    }
    if (context.instance == null) {
      context.instance = [];
    }
    return getPromise().then((function(_this) {
      return function() {
        return Validate(config, schema_haproxy);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return PostHAProxy(context.baseUrl, config);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        context.instance.push(resp);
        console.log("Start haproxy for instance: ", context.instance);
        context.bFactoryPush = true;
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Stop = function(context) {
    var instance;
    if (!(context.bInstalledPackages && context.service.name)) {
      throw new Error('haproxy-storm.Stop missingParams');
    }
    if (utils.isEmpty(context.instance)) {
      throw new Error('haproxy-strom.Stop Instance is empty');
    }
    instance = context.instance;
    return getPromise().then((function(_this) {
      return function(resp) {
        return DeleteHAProxy(context.baseUrl, instance);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        console.log("Stop haproxy Instance: ", instance);
        delete context.instance;
        context.instance = null;
        context.bFactoryPush = false;
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Update = function(context) {
    var instance, policyconfig;
    if (!(context.bInstalledPackages && context.service.name && context.policyConfig)) {
      throw new Error('haproxy-storm.Update missingParams');
    }
    if (utils.isEmpty(context.instance)) {
      throw new Error('haproxy-strom.Update Instance is empty');
    }
    instance = context.instance;
    policyconfig = context.policyConfig[context.service.name];
    return getPromise().then((function(_this) {
      return function() {
        return Validate(policyconfig, schema_haproxy);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        console.log("Update haproxy for instance : ", instance);
        return PutHAProxy(context.baseUrl, instance, policyconfig);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  module.exports.start = Start;

  module.exports.stop = Stop;

  module.exports.update = Update;

  module.exports.validate = Validate;

}).call(this);
